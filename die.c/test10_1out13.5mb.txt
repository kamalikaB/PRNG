				NOTE

	Most of the tests in DIEHARD return a p-value, which
	should be uniform on [0,1) if the input file contains truly
	independent random bits.   Those p-values are obtained by
	p=1-F(X), where F is the assumed distribution of the sample
	random variable X---often normal. But that assumed F is often just
	an asymptotic approximation, for which the fit will be worst
	in the tails. Thus you should not be surprised with  occasion-
	al p-values near 0 or 1, such as .0012 or .9983. When a bit
	stream really FAILS BIG, you will get p`s of 0 or 1 to six 
	or more places.  By all means, do not, as a Statistician 
	might, think that a p < .025 or p> .975 means that the RNG
	has "failed the test at the .05 level".  Such p`s happen
	among the hundreds that DIEHARD produces, even with good RNGs.
	 So keep in mind that "p happens"

	Enter the name of the file to be tested.
	This must be a form="unformatted",access="direct" binary
	file of about 10-12 million bytes. Enter file name: 

/home/kamalika/Desktop/krishnendu/project/diehard tests/die.c/ca_gen_no101.bin

		HERE ARE YOUR CHOICES:

		1   Birthday Spacings
		2   Overlapping Permutations
		3   Ranks of 31x31 and 32x32 matrices
		4   Ranks of 6x8 Matrices
		5   Monkey Tests on 20-bit Words
		6   Monkey Tests OPSO,OQSO,DNA
		7   Count the 1`s in a Stream of Bytes
		8   Count the 1`s in Specific Bytes
		9   Parking Lot Test
		10  Minimum Distance Test
		11  Random Spheres Test
		12  The Sqeeze Test
		13  Overlapping Sums Test
		14  Runs Test
		15  The Craps Test
		16  All of the above

	To choose any particular tests, enter corresponding numbers.
	Enter 16 for all tests. If you want to perform all but a few
	tests, enter corresponding numbers preceded by "-" sign.
	Tests are executed in the order they are entered.

	Enter your choices.
16

	|-------------------------------------------------------------|
	|           This is the BIRTHDAY SPACINGS TEST                |
	|Choose m birthdays in a "year" of n days.  List the spacings |
	|between the birthdays.  Let j be the number of values that   |
	|occur more than once in that list, then j is asymptotically  |
	|Poisson distributed with mean m^3/(4n).  Experience shows n  |
	|must be quite large, say n>=2^18, for comparing the results  |
	|to the Poisson distribution with that mean.  This test uses  |
	|n=2^24 and m=2^10, so that the underlying distribution for j |
	|is taken to be Poisson with lambda=2^30/(2^26)=16. A sample  |
	|of 200 j''s is taken, and a chi-square goodness of fit test  |
	|provides a p value.  The first test uses bits 1-24 (counting |
	|from the left) from integers in the specified file.  Then the|
	|file is closed and reopened, then bits 2-25 of the same inte-|
	|gers are used to provide birthdays, and so on to bits 9-32.  |
	|Each set of bits provides a p-value, and the nine p-values   |
	|provide a sample for a KSTEST.                               |
	|------------------------------------------------------------ |

		RESULTS OF BIRTHDAY SPACINGS TEST FOR /home/kamalika/Desktop/krishnendu/project/diehard tests/die.c/ca_gen_no101.bin
	(no_bdays=1024, no_days/yr=2^24, lambda=16.00, sample size=500)

	Bits used	mean		chisqr		p-value
	 1 to 24	15.63		24.1421		0.115626
	 2 to 25	15.49		29.5666		0.029645
	 3 to 26	15.64		16.4679		0.490942
	 4 to 27	15.38		27.1492		0.055915
	 5 to 28	15.72		18.6597		0.348411
	 6 to 29	15.68		14.2641		0.648324
	 7 to 30	15.38		22.0442		0.183024
	 8 to 31	15.50		13.7586		0.684111
	 9 to 32	15.78		16.2909		0.503314

			degree of freedoms is: 17
	---------------------------------------------------------------
		p-value for KStest on those 9 p-values: 0.149614


	|-------------------------------------------------------------|
	|           THE OVERLAPPING 5-PERMUTATION TEST                |
	|This is the OPERM5 test.  It looks at a sequence of one mill-|
	|ion 32-bit random integers.  Each set of five consecutive    |
	|integers can be in one of 120 states, for the 5! possible or-|
	|derings of five numbers.  Thus the 5th, 6th, 7th,...numbers  |
	|each provide a state. As many thousands of state transitions |
	|are observed,  cumulative counts are made of the number of   |
	|occurences of each state.  Then the quadratic form in the    |
	|weak inverse of the 120x120 covariance matrix yields a test  |
	|equivalent to the likelihood ratio test that the 120 cell    |
	|counts came from the specified (asymptotically) normal dis-  |
	|tribution with the specified 120x120 covariance matrix (with |
	|rank 99).  This version uses 1,000,000 integers, twice.      |
	|-------------------------------------------------------------|

			OPERM5 test for file 
		  (For samples of 1,000,000 consecutive 5-tuples)

			  sample 1 
	chisquare=-610423858935.791016 with df=99; p-value= -nan
	_______________________________________________________________

			  sample 2 
	chisquare=1019847076292.196045 with df=99; p-value= -nan
	_______________________________________________________________


	|-------------------------------------------------------------|
	|This is the BINARY RANK TEST for 31x31 matrices. The leftmost|
	|31 bits of 31 random integers from the test sequence are used|
	|to form a 31x31 binary matrix over the field {0,1}. The rank |
	|is determined. That rank can be from 0 to 31, but ranks< 28  |
	|are rare, and their counts are pooled with those for rank 28.|
	|Ranks are found for 40,000 such random matrices and a chisqu-|
	|are test is performed on counts for ranks 31,30,28 and <=28. |
	|-------------------------------------------------------------|
		Rank test for binary matrices (31x31) from /home/kamalika/Desktop/krishnendu/project/diehard tests/die.c/ca_gen_no101.bin

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=28	222         	211.4       	0.530       	0.530       
	r=29	5119        	5134.0      	0.044       	0.574       
	r=30	23016       	23103.0     	0.328       	0.902       
	r=31	11643       	11551.5     	0.724       	1.626       

		chi-square = 1.626 with df = 3;  p-value = 0.654
	--------------------------------------------------------------

	|-------------------------------------------------------------|
	|This is the BINARY RANK TEST for 32x32 matrices. A random 32x|
	|32 binary matrix is formed, each row a 32-bit random integer.|
	|The rank is determined. That rank can be from 0 to 32, ranks |
	|less than 29 are rare, and their counts are pooled with those|
	|for rank 29.  Ranks are found for 40,000 such random matrices|
	|and a chisquare test is performed on counts for ranks  32,31,|
	|30 and <=29.                                                 |
	|-------------------------------------------------------------|
		Rank test for binary matrices (32x32) from /home/kamalika/Desktop/krishnendu/project/diehard tests/die.c/ca_gen_no101.bin

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=29	212         	211.4       	0.002       	0.002       
	r=30	5230        	5134.0      	1.795       	1.796       
	r=31	22997       	23103.0     	0.487       	2.283       
	r=32	11561       	11551.5     	0.008       	2.291       

		chi-square = 2.291 with df = 3;  p-value = 0.514
	--------------------------------------------------------------

	|-------------------------------------------------------------|
	|This is the BINARY RANK TEST for 6x8 matrices.  From each of |
	|six random 32-bit integers from the generator under test, a  |
	|specified byte is chosen, and the resulting six bytes form a |
	|6x8 binary matrix whose rank is determined.  That rank can be|
	|from 0 to 6, but ranks 0,1,2,3 are rare; their counts are    |
	|pooled with those for rank 4. Ranks are found for 100,000    |
	|random matrices, and a chi-square test is performed on       |
	|counts for ranks 6,5 and (0,...,4) (pooled together).        |
	|-------------------------------------------------------------|

		Rank test for binary matrices (6x8) from /home/kamalika/Desktop/krishnendu/project/diehard tests/die.c/ca_gen_no101.bin

			      bits  1 to  8

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	940         	944.3       	0.020       	0.020       
	r=5	21485       	21743.9     	3.083       	3.102       
	r=6	77575       	77311.8     	0.896       	3.998       

		chi-square = 3.998 with df = 2;  p-value = 0.135
	--------------------------------------------------------------

			      bits  2 to  9

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	945         	944.3       	0.001       	0.001       
	r=5	21624       	21743.9     	0.661       	0.662       
	r=6	77431       	77311.8     	0.184       	0.845       

		chi-square = 0.845 with df = 2;  p-value = 0.655
	--------------------------------------------------------------

			      bits  3 to 10

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	907         	944.3       	1.473       	1.473       
	r=5	22017       	21743.9     	3.430       	4.903       
	r=6	77076       	77311.8     	0.719       	5.623       

		chi-square = 5.623 with df = 2;  p-value = 0.060
	--------------------------------------------------------------

			      bits  4 to 11

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	925         	944.3       	0.394       	0.394       
	r=5	21759       	21743.9     	0.010       	0.405       
	r=6	77316       	77311.8     	0.000       	0.405       

		chi-square = 0.405 with df = 2;  p-value = 0.817
	--------------------------------------------------------------

			      bits  5 to 12

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	921         	944.3       	0.575       	0.575       
	r=5	21765       	21743.9     	0.020       	0.595       
	r=6	77314       	77311.8     	0.000       	0.595       

		chi-square = 0.595 with df = 2;  p-value = 0.743
	--------------------------------------------------------------

			      bits  6 to 13

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	881         	944.3       	4.243       	4.243       
	r=5	21579       	21743.9     	1.251       	5.494       
	r=6	77540       	77311.8     	0.674       	6.167       

		chi-square = 6.167 with df = 2;  p-value = 0.046
	--------------------------------------------------------------

			      bits  7 to 14

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	925         	944.3       	0.394       	0.394       
	r=5	21622       	21743.9     	0.683       	1.078       
	r=6	77453       	77311.8     	0.258       	1.336       

		chi-square = 1.336 with df = 2;  p-value = 0.513
	--------------------------------------------------------------

			      bits  8 to 15

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	923         	944.3       	0.480       	0.480       
	r=5	21549       	21743.9     	1.747       	2.227       
	r=6	77528       	77311.8     	0.605       	2.832       

		chi-square = 2.832 with df = 2;  p-value = 0.243
	--------------------------------------------------------------

			      bits  9 to 16

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	941         	944.3       	0.012       	0.012       
	r=5	21612       	21743.9     	0.800       	0.812       
	r=6	77447       	77311.8     	0.236       	1.048       

		chi-square = 1.048 with df = 2;  p-value = 0.592
	--------------------------------------------------------------

			      bits 10 to 17

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	986         	944.3       	1.841       	1.841       
	r=5	21754       	21743.9     	0.005       	1.846       
	r=6	77260       	77311.8     	0.035       	1.881       

		chi-square = 1.881 with df = 2;  p-value = 0.390
	--------------------------------------------------------------

			      bits 11 to 18

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	995         	944.3       	2.722       	2.722       
	r=5	21822       	21743.9     	0.281       	3.003       
	r=6	77183       	77311.8     	0.215       	3.217       

		chi-square = 3.217 with df = 2;  p-value = 0.200
	--------------------------------------------------------------

			      bits 12 to 19

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	980         	944.3       	1.350       	1.350       
	r=5	21755       	21743.9     	0.006       	1.355       
	r=6	77265       	77311.8     	0.028       	1.384       

		chi-square = 1.384 with df = 2;  p-value = 0.501
	--------------------------------------------------------------

			      bits 13 to 20

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	935         	944.3       	0.092       	0.092       
	r=5	21625       	21743.9     	0.650       	0.742       
	r=6	77440       	77311.8     	0.213       	0.954       

		chi-square = 0.954 with df = 2;  p-value = 0.621
	--------------------------------------------------------------

			      bits 14 to 21

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	933         	944.3       	0.135       	0.135       
	r=5	21503       	21743.9     	2.669       	2.804       
	r=6	77564       	77311.8     	0.823       	3.627       

		chi-square = 3.627 with df = 2;  p-value = 0.163
	--------------------------------------------------------------

			      bits 15 to 22

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	945         	944.3       	0.001       	0.001       
	r=5	21542       	21743.9     	1.875       	1.875       
	r=6	77513       	77311.8     	0.524       	2.399       

		chi-square = 2.399 with df = 2;  p-value = 0.301
	--------------------------------------------------------------

			      bits 16 to 23

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	934         	944.3       	0.112       	0.112       
	r=5	21466       	21743.9     	3.552       	3.664       
	r=6	77600       	77311.8     	1.074       	4.738       

		chi-square = 4.738 with df = 2;  p-value = 0.094
	--------------------------------------------------------------

			      bits 17 to 24

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	945         	944.3       	0.001       	0.001       
	r=5	21807       	21743.9     	0.183       	0.184       
	r=6	77248       	77311.8     	0.053       	0.236       

		chi-square = 0.236 with df = 2;  p-value = 0.889
	--------------------------------------------------------------

			      bits 18 to 25

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	923         	944.3       	0.480       	0.480       
	r=5	21977       	21743.9     	2.499       	2.979       
	r=6	77100       	77311.8     	0.580       	3.560       

		chi-square = 3.560 with df = 2;  p-value = 0.169
	--------------------------------------------------------------

			      bits 19 to 26

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	943         	944.3       	0.002       	0.002       
	r=5	21980       	21743.9     	2.564       	2.565       
	r=6	77077       	77311.8     	0.713       	3.279       

		chi-square = 3.279 with df = 2;  p-value = 0.194
	--------------------------------------------------------------

			      bits 20 to 27

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	1005        	944.3       	3.902       	3.902       
	r=5	21499       	21743.9     	2.758       	6.660       
	r=6	77496       	77311.8     	0.439       	7.099       

		chi-square = 7.099 with df = 2;  p-value = 0.029
	--------------------------------------------------------------

			      bits 21 to 28

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	950         	944.3       	0.034       	0.034       
	r=5	21688       	21743.9     	0.144       	0.178       
	r=6	77362       	77311.8     	0.033       	0.211       

		chi-square = 0.211 with df = 2;  p-value = 0.900
	--------------------------------------------------------------

			      bits 22 to 29

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	949         	944.3       	0.023       	0.023       
	r=5	21633       	21743.9     	0.566       	0.589       
	r=6	77418       	77311.8     	0.146       	0.735       

		chi-square = 0.735 with df = 2;  p-value = 0.692
	--------------------------------------------------------------

			      bits 23 to 30

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	953         	944.3       	0.080       	0.080       
	r=5	21653       	21743.9     	0.380       	0.460       
	r=6	77394       	77311.8     	0.087       	0.548       

		chi-square = 0.548 with df = 2;  p-value = 0.761
	--------------------------------------------------------------

			      bits 24 to 31

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	946         	944.3       	0.003       	0.003       
	r=5	21869       	21743.9     	0.720       	0.723       
	r=6	77185       	77311.8     	0.208       	0.931       

		chi-square = 0.931 with df = 2;  p-value = 0.628
	--------------------------------------------------------------

			      bits 25 to 32

	RANK	OBSERVED	EXPECTED	(O-E)^2/E	SUM

	r<=4	936         	944.3       	0.073       	0.073       
	r=5	21945       	21743.9     	1.860       	1.933       
	r=6	77119       	77311.8     	0.481       	2.414       

		chi-square = 2.414 with df = 2;  p-value = 0.299
	--------------------------------------------------------------
	    TEST SUMMARY, 25 tests on 100,000 random 6x8 matrices
	    These should be 25 uniform [0,1] random variates:
 
	0.135451    	0.655258    	0.060126    	0.816615    	0.742505     
	0.045790    	0.512800    	0.242680    	0.592124    	0.390460     
	0.200167    	0.500658    	0.620536    	0.163094    	0.301368     
	0.093555    	0.888571    	0.168674    	0.194124    	0.028739     
	0.900004    	0.692499    	0.760500    	0.627894    	0.299146    
		The KS test for those 25 supposed UNI's yields
			KS p-value = 0.317381

	|-------------------------------------------------------------|
	|                  THE BITSTREAM TEST                         |
	|The file under test is viewed as a stream of bits. Call them |
	|b1,b2,... .  Consider an alphabet with two "letters", 0 and 1|
	|and think of the stream of bits as a succession of 20-letter |
	|"words", overlapping.  Thus the first word is b1b2...b20, the|
	|second is b2b3...b21, and so on.  The bitstream test counts  |
	|the number of missing 20-letter (20-bit) words in a string of|
	|2^21 overlapping 20-letter words.  There are 2^20 possible 20|
	|letter words.  For a truly random string of 2^21+19 bits, the|
	|number of missing words j should be (very close to) normally |
	|distributed with mean 141,909 and sigma 428.  Thus           |
	| (j-141909)/428 should be a standard normal variate (z score)|
	|that leads to a uniform [0,1) p value.  The test is repeated |
	|twenty times.                                                |
	|-------------------------------------------------------------|

		THE OVERLAPPING 20-TUPLES BITSTREAM  TEST for /home/kamalika/Desktop/krishnendu/project/diehard tests/die.c/ca_gen_no101.bin
	 (20 bits/word, 2097152 words 20 bitstreams. No. missing words 
	  should average 141909.33 with sigma=428.00.)
	----------------------------------------------------------------
		   BITSTREAM test results for /home/kamalika/Desktop/krishnendu/project/diehard tests/die.c/ca_gen_no101.bin.

	Bitstream	No. missing words	z-score		p-value
	   1		142014 			 0.24		0.403400
	   2		141674 			-0.55		0.708784
	   3		141287 			-1.45		0.927033
	   4		141437 			-1.10		0.865111
	   5		141736 			-0.40		0.657253
	   6		142000 			 0.21		0.416114
	   7		141725 			-0.43		0.666649
	   8		141681 			-0.53		0.703150
	   9		142004 			 0.22		0.412472
	   10		142169 			 0.61		0.272023
	   11		141065 			-1.97		0.975737
	   12		141222 			-1.61		0.945853
	   13		141792 			-0.27		0.608010
	   14		142108 			 0.46		0.321259
	   15		141711 			-0.46		0.678457
	   16		141592 			-0.74		0.770782
	   17		141476 			-1.01		0.844339
	   18		141715 			-0.45		0.675101
	   19		142474 			 1.32		0.093531
	   20		142384 			 1.11		0.133706
	----------------------------------------------------------------

	|-------------------------------------------------------------|
	|        OPSO means Overlapping-Pairs-Sparse-Occupancy        |
	|The OPSO test considers 2-letter words from an alphabet of   |
	|1024 letters.  Each letter is determined by a specified ten  |
	|bits from a 32-bit integer in the sequence to be tested. OPSO|
	|generates  2^21 (overlapping) 2-letter words  (from 2^21+1   |
	|"keystrokes")  and counts the number of missing words---that |
	|is 2-letter words which do not appear in the entire sequence.|
	|That count should be very close to normally distributed with |
	|mean 141,909, sigma 290. Thus (missingwrds-141909)/290 should|
	|be a standard normal variable. The OPSO test takes 32 bits at|
	|a time from the test file and uses a designated set of ten   |
	|consecutive bits. It then restarts the file for the next de- |
	|signated 10 bits, and so on.                                 |
	|------------------------------------------------------------ |

			   OPSO test for file /home/kamalika/Desktop/krishnendu/project/diehard tests/die.c/ca_gen_no101.bin

	Bits used	No. missing words	z-score		p-value
	23 to 32  		146040 		 14.2437		0.000000
	22 to 31  		143600 		 5.8299		0.000000
	21 to 30  		142825 		 3.1575		0.000796
	20 to 29  		142982 		 3.6989		0.000108
	19 to 28  		142299 		 1.3437		0.089524
	18 to 27  		142029 		 0.4127		0.339930
	17 to 26  		141774 		-0.4667		0.679627
	16 to 25  		141908 		-0.0046		0.501830
	15 to 24  		142024 		 0.3954		0.346269
	14 to 23  		141947 		 0.1299		0.448324
	13 to 22  		141957 		 0.1644		0.434716
	12 to 21  		141457 		-1.5598		0.940592
	11 to 20  		142174 		 0.9127		0.180712
	10 to 19  		141825 		-0.2908		0.614395
	9 to 18  		142245 		 1.1575		0.123538
	8 to 17  		141873 		-0.1253		0.549847
	7 to 16  		141568 		-1.1770		0.880402
	6 to 15  		142135 		 0.7782		0.218234
	5 to 14  		141631 		-0.9598		0.831412
	4 to 13  		142261 		 1.2127		0.112631
	3 to 12  		142029 		 0.4127		0.339930
	2 to 11  		141810 		-0.3425		0.634019
	1 to 10  		141858 		-0.1770		0.570246
	-----------------------------------------------------------------

	|------------------------------------------------------------ |
	|    OQSO means Overlapping-Quadruples-Sparse-Occupancy       |
	|  The test OQSO is similar, except that it considers 4-letter|
	|words from an alphabet of 32 letters, each letter determined |
	|by a designated string of 5 consecutive bits from the test   |
	|file, elements of which are assumed 32-bit random integers.  |
	|The mean number of missing words in a sequence of 2^21 four- |
	|letter words,  (2^21+3 "keystrokes"), is again 141909, with  |
	|sigma = 295.  The mean is based on theory; sigma comes from  |
	|extensive simulation.                                        |
	|------------------------------------------------------------ |

			   OQSO test for file /home/kamalika/Desktop/krishnendu/project/diehard tests/die.c/ca_gen_no101.bin

	Bits used	No. missing words	z-score		p-value
	28 to 32  		142526 		 2.0904		0.018291
	27 to 31  		142419 		 1.7277		0.042021
	26 to 30  		143096 		 4.0226		0.000029
	25 to 29  		143303 		 4.7243		0.000001
	24 to 28  		142064 		 0.5243		0.300033
	23 to 27  		141202 		-2.3977		0.991751
	22 to 26  		141979 		 0.2362		0.406651
	21 to 25  		142104 		 0.6599		0.254659
	20 to 24  		141926 		 0.0565		0.477468
	19 to 23  		142065 		 0.5277		0.298855
	18 to 22  		141874 		-0.1198		0.547664
	17 to 21  		142092 		 0.6192		0.267886
	16 to 20  		142297 		 1.3141		0.094400
	15 to 19  		141430 		-1.6248		0.947902
	14 to 18  		141483 		-1.4452		0.925797
	13 to 17  		142097 		 0.6362		0.262333
	12 to 16  		141826 		-0.2825		0.611210
	11 to 15  		142157 		 0.8396		0.200578
	10 to 14  		141999 		 0.3040		0.380577
	9 to 13  		141543 		-1.2418		0.892844
	8 to 12  		142056 		 0.4972		0.309529
	7 to 11  		142033 		 0.4192		0.337527
	6 to 10  		142154 		 0.8294		0.203442
	5 to 9  		142782 		 2.9582		0.001547
	4 to 8  		142733 		 2.7921		0.002618
	3 to 7  		142354 		 1.5074		0.065860
	2 to 6  		141971 		 0.2091		0.417204
	1 to 5  		141479 		-1.4587		0.927682
	-----------------------------------------------------------------

	|------------------------------------------------------------ |
	|    The DNA test considers an alphabet of 4 letters: C,G,A,T,|
	|determined by two designated bits in the sequence of random  |
	|integers being tested.  It considers 10-letter words, so that|
	|as in OPSO and OQSO, there are 2^20 possible words, and the  |
	|mean number of missing words from a string of 2^21  (over-   |
	|lapping)  10-letter  words (2^21+9 "keystrokes") is 141909.  |
	|The standard deviation sigma=339 was determined as for OQSO  |
	|by simulation.  (Sigma for OPSO, 290, is the true value (to  |
	|three places), not determined by simulation.                 |
	|------------------------------------------------------------ |

			   DNA test for file /home/kamalika/Desktop/krishnendu/project/diehard tests/die.c/ca_gen_no101.bin

	Bits used	No. missing words	z-score		p-value
	31 to 32  		141762 		-0.4346		0.668074
	30 to 31  		142192 		 0.8338		0.202187
	29 to 30  		141636 		-0.8063		0.789960
	28 to 29  		142273 		 1.0728		0.141686
	27 to 28  		141945 		 0.1052		0.458100
	26 to 27  		141518 		-1.1544		0.875825
	25 to 26  		142138 		 0.6745		0.249983
	24 to 25  		142567 		 1.9400		0.026188
	23 to 24  		141550 		-1.0600		0.855421
	22 to 23  		141591 		-0.9390		0.826141
	21 to 22  		141746 		-0.4818		0.685026
	20 to 21  		142672 		 2.2498		0.012232
	19 to 20  		141708 		-0.5939		0.723708
	18 to 19  		142328 		 1.2350		0.108412
	17 to 18  		142052 		 0.4209		0.336930
	16 to 17  		141358 		-1.6263		0.948062
	15 to 16  		141751 		-0.4671		0.679768
	14 to 15  		141634 		-0.8122		0.791657
	13 to 14  		142526 		 1.8191		0.034449
	12 to 13  		142113 		 0.6008		0.273988
	11 to 12  		142044 		 0.3973		0.345589
	10 to 11  		142351 		 1.3029		0.096311
	9 to 10  		141709 		-0.5909		0.722721
	8 to 9  		142382 		 1.3943		0.081612
	7 to 8  		142413 		 1.4858		0.068672
	6 to 7  		142638 		 2.1495		0.015799
	5 to 6  		141865 		-0.1308		0.552020
	4 to 5  		141523 		-1.1396		0.872777
	3 to 4  		141912 		 0.0079		0.496858
	2 to 3  		142319 		 1.2085		0.113434
	1 to 2  		141482 		-1.2606		0.896266
	-----------------------------------------------------------------

	|-------------------------------------------------------------|
	|    This is the COUNT-THE-1''s TEST on a stream of bytes.    |
	|Consider the file under test as a stream of bytes (four per  |
	|32 bit integer).  Each byte can contain from 0 to 8 1''s,    |
	|with probabilities 1,8,28,56,70,56,28,8,1 over 256.  Now let |
	|the stream of bytes provide a string of overlapping  5-letter|
	|words, each "letter" taking values A,B,C,D,E. The letters are|
	|determined by the number of 1''s in a byte: 0,1,or 2 yield A,|
	|3 yields B, 4 yields C, 5 yields D and 6,7 or 8 yield E. Thus|
	|we have a monkey at a typewriter hitting five keys with vari-|
	|ous probabilities (37,56,70,56,37 over 256).  There are 5^5  |
	|possible 5-letter words, and from a string of 256,000 (over- |
	|lapping) 5-letter words, counts are made on the frequencies  |
	|for each word.   The quadratic form in the weak inverse of   |
	|the covariance matrix of the cell counts provides a chisquare|
	|test: Q5-Q4, the difference of the naive Pearson sums of     |
	|(OBS-EXP)^2/EXP on counts for 5- and 4-letter cell counts.   |
	|-------------------------------------------------------------|

		Test result for the byte stream from /home/kamalika/Desktop/krishnendu/project/diehard tests/die.c/ca_gen_no101.bin
	  (Degrees of freedom: 5^4-5^3=2500; sample size: 2560000)

			chisquare	z-score		p-value
			2315.37		-2.611		0.995487

	|-------------------------------------------------------------|
	|    This is the COUNT-THE-1''s TEST for specific bytes.      |
	|Consider the file under test as a stream of 32-bit integers. |
	|From each integer, a specific byte is chosen , say the left- |
	|most: bits 1 to 8. Each byte can contain from 0 to 8 1''s,   |
	|with probabilitie 1,8,28,56,70,56,28,8,1 over 256.  Now let  |
	|the specified bytes from successive integers provide a string|
	|of (overlapping) 5-letter words, each "letter" taking values |
	|A,B,C,D,E. The letters are determined  by the number of 1''s,|
	|in that byte: 0,1,or 2 ---> A, 3 ---> B, 4 ---> C, 5 ---> D, |
	|and  6,7 or 8 ---> E.  Thus we have a monkey at a typewriter |
	|hitting five keys with with various probabilities: 37,56,70, |
	|56,37 over 256. There are 5^5 possible 5-letter words, and   |
	|from a string of 256,000 (overlapping) 5-letter words, counts|
	|are made on the frequencies for each word. The quadratic form|
	|in the weak inverse of the covariance matrix of the cell     |
	|counts provides a chisquare test: Q5-Q4, the difference of   |
	|the naive Pearson  sums of (OBS-EXP)^2/EXP on counts for 5-  |
	|and 4-letter cell  counts.                                   |
	|-------------------------------------------------------------|

		Test results for specific bytes from /home/kamalika/Desktop/krishnendu/project/diehard tests/die.c/ca_gen_no101.bin
	  (Degrees of freedom: 5^4-5^3=2500; sample size: 256000)

	bits used	chisquare	z-score		p-value
	1 to 8  	2413.77		-1.220		0.888677
	2 to 9  	2554.00		 0.764		0.222521
	3 to 10  	2534.22		 0.484		0.314233
	4 to 11  	2490.68		-0.132		0.552417
	5 to 12  	2499.44		-0.008		0.503185
	6 to 13  	2364.02		-1.923		0.972765
	7 to 14  	2438.85		-0.865		0.806431
	8 to 15  	2400.01		-1.414		0.921339
	9 to 16  	2343.73		-2.210		0.986449
	10 to 17  	2421.49		-1.110		0.866566
	11 to 18  	2480.32		-0.278		0.609629
	12 to 19  	2447.19		-0.747		0.772440
	13 to 20  	2451.78		-0.682		0.752340
	14 to 21  	2437.29		-0.887		0.812427
	15 to 22  	2468.68		-0.443		0.671103
	16 to 23  	2516.83		 0.238		0.405959
	17 to 24  	2572.93		 1.031		0.151174
	18 to 25  	2524.24		 0.343		0.365886
	19 to 26  	2402.05		-1.385		0.917008
	20 to 27  	2604.49		 1.478		0.069747
	21 to 28  	2475.46		-0.347		0.635739
	22 to 29  	2450.38		-0.702		0.758579
	23 to 30  	2540.97		 0.579		0.281137
	24 to 31  	2525.89		 0.366		0.357120
	25 to 32  	2515.28		 0.216		0.414458
	|-------------------------------------------------------------|
	|              THIS IS A PARKING LOT TEST                     |
	|In a square of side 100, randomly "park" a car---a circle of |
	|radius 1.   Then try to park a 2nd, a 3rd, and so on, each   |
	|time parking "by ear".  That is, if an attempt to park a car |
	|causes a crash with one already parked, try again at a new   |
	|random location. (To avoid path problems, consider parking   |
	|helicopters rather than cars.)   Each attempt leads to either|
	|a crash or a success, the latter followed by an increment to |
	|the list of cars already parked. If we plot n: the number of |
	|attempts, versus k: the number successfully parked, we get a |
	|curve that should be similar to those provided by a perfect  |
	|random number generator.  Theory for the behavior of such a  |
	|random curve seems beyond reach, and as graphics displays are|
	|not available for this battery of tests, a simple characteriz|
	|ation of the random experiment is used: k, the number of cars|
	|successfully parked after n=12,000 attempts. Simulation shows|
	|that k should average 3523 with sigma 21.9 and is very close |
	|to normally distributed.  Thus (k-3523)/21.9 should be a st- |
	|andard normal variable, which, converted to a uniform varia- |
	|ble, provides input to a KSTEST based on a sample of 10.     |
	|-------------------------------------------------------------|

		CDPARK: result of 10 tests on file /home/kamalika/Desktop/krishnendu/project/diehard tests/die.c/ca_gen_no101.bin
	  (Of 12000 tries, the average no. of successes should be 
	   3523.0 with sigma=21.9)

	   No. succeses		z-score		p-value
		3518		-0.2283		0.590298
		3531		 0.3653		0.357445
		3522		-0.0457		0.518210
		3499		-1.0959		0.863437
		3501		-1.0046		0.842447
		3503		-0.9132		0.819442
		3497		-1.1872		0.882429
		3490		-1.5068		0.934075
		3589		 3.0137		0.001290
		3549		 1.1872		0.117571
	  Square side=100, avg. no. parked=3519.90 sample std.=28.72
	     p-value of the KSTEST for those 10 p-values: 0.000000


	|-------------------------------------------------------------|
	|              THE MINIMUM DISTANCE TEST                      |
	|It does this 100 times:  choose n=8000 random points in a    |
	|square of side 10000.  Find d, the minimum distance between  |
	|the (n^2-n)/2 pairs of points.  If the points are truly inde-|
	|pendent uniform, then d^2, the square of the minimum distance|
	|should be (very close to) exponentially distributed with mean|
	|.995 .  Thus 1-exp(-d^2/.995) should be uniform on [0,1) and |
	|a KSTEST on the resulting 100 values serves as a test of uni-|
	|formity for random points in the square. Test numbers=0 mod 5|
	|are printed but the KSTEST is based on the full set of 100   |
	|random choices of 8000 points in the 10000x10000 square.     |
	|-------------------------------------------------------------|

		This is the MINIMUM DISTANCE test for file /home/kamalika/Desktop/krishnendu/project/diehard tests/die.c/ca_gen_no101.bin

	Sample no.	 d^2		 mean		equiv uni
	   5		1.1011		0.6455		0.669323
	   10		0.3189		0.7086		0.274241
	   15		0.1616		1.1307		0.149916
	   20		0.3798		1.0447		0.317282
	   25		0.8831		1.0404		0.588313
	   30		0.4409		0.9110		0.357945
	   35		0.9235		0.9483		0.604702
	   40		1.0636		0.9421		0.656631
	   45		0.8411		0.9322		0.570566
	   50		2.7278		0.9464		0.935526
	   55		1.1960		1.0117		0.699396
	   60		2.6959		1.0292		0.933429
	   65		0.0265		1.1663		0.026268
	   70		0.7413		1.1491		0.525258
	   75		0.4583		1.1202		0.369089
	   80		0.5931		1.1243		0.449012
	   85		1.2695		1.1371		0.720807
	   90		1.2828		1.1250		0.724516
	   95		3.4013		1.1246		0.967233
	   100		0.1777		1.1005		0.163529
	--------------------------------------------------------------
	Result of KS test on 100 transformed mindist^2's: p-value=0.475830


	|-------------------------------------------------------------|
	|             THE 3DSPHERES TEST                              |
	|Choose  4000 random points in a cube of edge 1000.  At each  |
	|point, center a sphere large enough to reach the next closest|
	|point. Then the volume of the smallest such sphere is (very  |
	|close to) exponentially distributed with mean 120pi/3.  Thus |
	|the radius cubed is exponential with mean 30. (The mean is   |
	|obtained by extensive simulation).  The 3DSPHERES test gener-|
	|ates 4000 such spheres 20 times.  Each min radius cubed leads|
	|to a uniform variable by means of 1-exp(-r^3/30.), then a    |
	| KSTEST is done on the 20 p-values.                          |
	|-------------------------------------------------------------|

		    The 3DSPHERES test for file /home/kamalika/Desktop/krishnendu/project/diehard tests/die.c/ca_gen_no101.bin

		sample no	r^3		equiv. uni.
		   1		0.092		0.003074
		   2		9.067		0.260838
		   3		3.057		0.096889
		   4		139.064		0.990299
		   5		3.036		0.096249
		   6		56.819		0.849526
		   7		1.279		0.041723
		   8		53.297		0.830782
		   9		10.070		0.285146
		   10		14.979		0.393040
		   11		4.545		0.140591
		   12		82.917		0.936954
		   13		34.540		0.683790
		   14		41.217		0.746880
		   15		5.301		0.161977
		   16		11.995		0.329559
		   17		11.507		0.318577
		   18		31.036		0.644603
		   19		119.429		0.981332
		   20		6.057		0.182811
	--------------------------------------------------------------
		p-value for KS test on those 20 p-values: 0.270063


	|-------------------------------------------------------------|
	|                 This is the SQUEEZE test                    |
	| Random integers are floated to get uniforms on [0,1). Start-|
	| ing with k=2^31=2147483647, the test finds j, the number of |
	| iterations necessary to reduce k to 1, using the reduction  |
	| k=ceiling(k*U), with U provided by floating integers from   |
	| the file being tested.  Such j''s are found 100,000 times,  |
	| then counts for the number of times j was <=6,7,...,47,>=48 |
	| are used to provide a chi-square test for cell frequencies. |
	|-------------------------------------------------------------|

			RESULTS OF SQUEEZE TEST FOR /home/kamalika/Desktop/krishnendu/project/diehard tests/die.c/ca_gen_no101.bin

		    Table of standardized frequency counts
		(obs-exp)^2/exp  for j=(1,..,6), 7,...,47,(48,...)
		 2.7  	 1.8  	 0.6  	 0.8  	-0.5  	-0.1  
		 0.8  	-0.4  	-0.3  	 2.9  	-0.7  	 0.9  
		-0.6  	 0.3  	 0.4  	-0.5  	-0.5  	-1.1  
		 0.9  	 0.9  	 0.1  	-0.9  	 0.4  	-0.3  
		-0.4  	-1.6  	 0.7  	-2.0  	 0.6  	 0.4  
		 0.1  	 0.4  	-0.5  	 2.7  	-0.9  	 0.6  
		-0.7  	-1.3  	 0.5  	-0.1  	-0.6  	 1.0  
		-1.1  
		Chi-square with 42 degrees of freedom:48.601048
		z-score=0.720233, p-value=0.224364
	_____________________________________________________________


	|-------------------------------------------------------------|
	|            The  OVERLAPPING SUMS test                       |
	|Integers are floated to get a sequence U(1),U(2),... of uni- |
	|form [0,1) variables.  Then overlapping sums,                |
	|  S(1)=U(1)+...+U(100), S2=U(2)+...+U(101),... are formed.   |
	|The S''s are virtually normal with a certain covariance mat- |
	|rix.  A linear transformation of the S''s converts them to a |
	|sequence of independent standard normals, which are converted|
	|to uniform variables for a KSTEST.                           |
	|-------------------------------------------------------------|

			Results of the OSUM test for /home/kamalika/Desktop/krishnendu/project/diehard tests/die.c/ca_gen_no101.bin

			Test no			p-value
			  1 			0.194616
			  2 			0.247667
			  3 			0.288052
			  4 			0.454541
			  5 			0.253898
			  6 			0.538836
			  7 			0.675700
			  8 			0.722500
			  9 			0.871487
			  10 			0.838384
	_____________________________________________________________

		p-value for 10 kstests on 100 kstests:0.841204

	|-------------------------------------------------------------|
	|    This is the RUNS test.  It counts runs up, and runs down,|
	|in a sequence of uniform [0,1) variables, obtained by float- |
	|ing the 32-bit integers in the specified file. This example  |
	|shows how runs are counted: .123,.357,.789,.425,.224,.416,.95|
	|contains an up-run of length 3, a down-run of length 2 and an|
	|up-run of (at least) 2, depending on the next values.  The   |
	|covariance matrices for the runs-up and runs-down are well   |
	|known, leading to chisquare tests for quadratic forms in the |
	|weak inverses of the covariance matrices.  Runs are counted  |
	|for sequences of length 10,000.  This is done ten times. Then|
	|another three sets of ten.                                   |
	|-------------------------------------------------------------|

			The RUNS test for file /home/kamalika/Desktop/krishnendu/project/diehard tests/die.c/ca_gen_no101.bin
		(Up and down runs in a sequence of 10000 numbers)
				Set 1
		 runs up; ks test for 10 p's: 0.986217
		 runs down; ks test for 10 p's: 0.633500
				Set 2
		 runs up; ks test for 10 p's: 0.969347
		 runs down; ks test for 10 p's: 0.643871

	|-------------------------------------------------------------|
	|This the CRAPS TEST.  It plays 200,000 games of craps, counts|
	|the number of wins and the number of throws necessary to end |
	|each game.  The number of wins should be (very close to) a   |
	|normal with mean 200000p and variance 200000p(1-p), and      |
	|p=244/495.  Throws necessary to complete the game can vary   |
	|from 1 to infinity, but counts for all>21 are lumped with 21.|
	|A chi-square test is made on the no.-of-throws cell counts.  |
	|Each 32-bit integer from the test file provides the value for|
	|the throw of a die, by floating to [0,1), multiplying by 6   |
	|and taking 1 plus the integer part of the result.            |
	|-------------------------------------------------------------|

		RESULTS OF CRAPS TEST FOR /home/kamalika/Desktop/krishnendu/project/diehard tests/die.c/ca_gen_no101.bin 
	No. of wins:  Observed	Expected
	                 98663        98585.858586
		z-score= 0.345, pvalue=0.36504

	Analysis of Throws-per-Game:

	Throws	Observed	Expected	Chisq	 Sum of (O-E)^2/E
	1	66605		66666.7		0.057		0.057
	2	38041		37654.3		3.971		4.028
	3	26731		26954.7		1.857		5.885
	4	19202		19313.5		0.643		6.528
	5	13659		13851.4		2.673		9.201
	6	10069		9943.5		1.583		10.784
	7	7169		7145.0		0.080		10.865
	8	5149		5139.1		0.019		10.884
	9	3726		3699.9		0.185		11.068
	10	2710		2666.3		0.716		11.785
	11	1904		1923.3		0.194		11.979
	12	1378		1388.7		0.083		12.062
	13	1008		1003.7		0.018		12.080
	14	707		726.1		0.505		12.585
	15	490		525.8		2.442		15.027
	16	395		381.2		0.503		15.530
	17	300		276.5		1.990		17.521
	18	214		200.8		0.864		18.384
	19	162		146.0		1.757		20.141
	20	105		106.2		0.014		20.155
	21	276		287.1		0.430		20.585

	Chisq=  20.59 for 20 degrees of freedom, p= 0.42188

		SUMMARY of craptest on /home/kamalika/Desktop/krishnendu/project/diehard tests/die.c/ca_gen_no101.bin
	 p-value for no. of wins: 0.365039
	 p-value for throws/game: 0.421883
	_____________________________________________________________


